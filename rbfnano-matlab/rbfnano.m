%% Radial Basis Functions for Nanoparticles


%% Initialize variables.
filename = 'nanoparticle_dta.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
rarb1 = dataArray{:, 1};
fafb1 = dataArray{:, 2};
nbna1 = dataArray{:, 3};
Structure = dataArray{:, 4};
data = [rarb1,fafb1,nbna1];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;
%% Split into train/test/validate data

% sort data by structure name
[str, str_ind] = sort(Structure);
sort_data = data(str_ind,:);

% remove all the clusters (their names have lengths longer than 5)
cluster_ind = find(cellfun('length',str)>7);

% extract cluster data for later
cluster_data = sort_data(cluster_ind,:);
cluster_names = str(cluster_ind);

% remove cluster elements from array (THIS IS PAINFULLY STATEFUL)
sort_data(cluster_ind,:) = [];
str(cluster_ind,:) = [];

name2vec = @(x) arrayfun(@(i) strcmp(i,x),{'"AlB2"', '"Cr3Si"', '"CsCl"'});

% rename variables 
good_data = sort_data;
good_str = str; 
good_y = cell2mat(arrayfun(name2vec,str,'UniformOutput',false)); 

test_frac = 0.20;
frac_int = ceil(test_frac*length(good_str)); 
r = randperm(length(good_str));

name2vec = @(x) arrayfun(@(i) strcmp(i,x),{'"AlB2"', '"Cr3Si"', '"CsCl"'});

test_data = good_data(r(1:frac_int),:);
test_str = good_str(r(1:frac_int)); 
test_y = cell2mat(arrayfun(name2vec,test_str,'UniformOutput',false));
 
train_data = good_data(r(frac_int+1:end),:);
train_str = good_str(r(frac_int+1:end),:);
train_y = cell2mat(arrayfun(name2vec,train_str,'UniformOutput',false)); 


% two hours later the data is ready
%% Define transfer function

phi = @(r,s) exp(-r^2/s^2); % Gaussian
% @(r) r^3    % cubic
% @(r) 1/(1+r) % cauchy

% SEE RADIAL BASIS FUNCTIONS Pg 185

%% RBF

%out = newrb(train_data',train_y',0.0,1.0);

% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Wed Jul 02 16:55:58 EDT 2014
%
% This script assumes these variables are defined:
%
%   good_data - input data.
%   good_y - target data.

inputs = good_data';
targets = good_y';

%% HOW DO WE FIND THE BEST s, and Q here 

net = newrb(inputs,targets,0,0.25,40); 

%% Found 0.25 and 40 by putzing


% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs)

% Recalculate Training, Validation and Test Performance
% trainTargets = targets .* tr.trainMask{1};
% valTargets = targets  .* tr.valMask{1};
% testTargets = targets  .* tr.testMask{1};
% trainPerformance = perform(net,trainTargets,outputs)
% valPerformance = perform(net,valTargets,outputs)
% testPerformance = perform(net,testTargets,outputs)

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
 figure, plotconfusion(targets,outputs)
 figure, plotroc(targets,outputs)
 figure, ploterrhist(errors)

